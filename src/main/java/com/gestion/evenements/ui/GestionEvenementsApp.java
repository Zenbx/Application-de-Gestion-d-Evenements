package com.gestion.evenements.ui;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.text.Font;
import javafx.stage.Stage;

import com.gestion.evenements.controller.*;
import com.gestion.evenements.observer.UIObserver;
import com.gestion.evenements.util.DataSynchronizer;
import com.gestion.evenements.ui.utils.ModernNotificationUtils;
import com.gestion.evenements.auth.User;
import com.gestion.evenements.auth.UserRole;

/**
 * Application principale avec interface graphique moderne - Version connect√©e avec utilisateur r√©el
 * Utilise le pattern Observer pour synchroniser les donn√©es entre le front-end et le back-end
 * Interface d'administration accessible uniquement aux administrateurs connect√©s
 */
public class GestionEvenementsApp extends Application {

    private BorderPane mainLayout;
    private ScrollPane sideBarScrollPane;
    private VBox sideBar;
    private ScrollPane contentScrollPane;
    private BorderPane contentArea;
    private Button selectedButton;
    private Label globalStatusLabel;
    
    // Services et synchronisation
    private DataSynchronizer dataSynchronizer;
    private UIObserver globalUIObserver;
    
    // Utilisateur connect√© (r√©el)
    private User currentUser;
    
    // Contr√¥leurs connect√©s au back-end
    private EvenementController evenementController;
    private ParticipantController participantController;
    private OrganisateurController organisateurController;

    /**
     * D√©finit l'utilisateur connect√© (appel√© depuis LoginView)
     */
    public void setCurrentUser(User user) {
        this.currentUser = user;
        if (user != null && user.getRole() == UserRole.ADMINISTRATEUR) {
            System.out.println("‚úÖ Administrateur connect√©: " + user.getNom());
        } else if (user != null) {
            throw new IllegalArgumentException("L'utilisateur doit √™tre un administrateur pour acc√©der √† cette interface");
        }
        // Si user est null, on permet l'acc√®s en mode d√©mo (pour les tests)
    }

    @Override
    public void start(Stage primaryStage) {
        // Initialisation des services
        initializeServices();
        
        // Configuration de la fen√™tre principale
        String titleSuffix = currentUser != null ? " (" + currentUser.getNom() + ")" : " (Mode D√©mo)";
        primaryStage.setTitle("Gestion d'√âv√©nements - Interface Administrative" + titleSuffix);
        primaryStage.setMinWidth(1200);
        primaryStage.setMinHeight(800);
        
        // Chargement des polices
        loadFonts();
        
        // Initialisation des contr√¥leurs connect√©s
        initializeControllers();
        
        // Cr√©ation de l'interface responsive
        createResponsiveUI();

        // Cr√©ation de la sc√®ne avec CSS
        Scene scene = new Scene(mainLayout, 1008, 720);
        scene.getStylesheets().add(getClass().getResource("/com/gestion/evenements/ui/styles/modernStyle.css").toExternalForm());
        
        primaryStage.setScene(scene);
        primaryStage.show();
        
        // Afficher les √©v√©nements par d√©faut
        showEvenements();
        
        // Afficher un message de bienvenue moderne
        showWelcomeMessage();
    }
    
    private void initializeServices() {
        // Initialiser le synchronisateur de donn√©es
        dataSynchronizer = DataSynchronizer.getInstance();

        dataSynchronizer.loadAllData();
        
        // Cr√©er un observer global pour l'interface
        globalUIObserver = new UIObserver(() -> {
            // Callback pour rafra√Æchir toute l'interface quand il y a des changements
            updateGlobalStatus();
        });
        
        // Ajouter l'observer global
        dataSynchronizer.addGlobalObserver(globalUIObserver);
    }
    
    private void loadFonts() {
        Font font = Font.loadFont(
            getClass().getResourceAsStream("/com/gestion/evenements/ui/fonts/Poppins-Regular.ttf"), 12
        );
        
        if (font == null) {
            System.out.println("‚ö†Ô∏è Police Poppins non trouv√©e, utilisation de la police par d√©faut");
        } else {
            System.out.println("‚úÖ Police Poppins charg√©e avec succ√®s");
        }
    }
    
    private void initializeControllers() {
        // Cr√©er les contr√¥leurs connect√©s au back-end
        evenementController = new EvenementController();
        participantController = new ParticipantController();
        organisateurController = new OrganisateurController();
        
        System.out.println("‚úÖ Contr√¥leurs initialis√©s et connect√©s au back-end");
    }
    
    private void createResponsiveUI() {
        mainLayout = new BorderPane();
        mainLayout.getStyleClass().add("main-container");
        
        // Cr√©ation de la barre lat√©rale avec ScrollPane
        createResponsiveSideBar();
        
        // Cr√©ation de la zone de contenu avec ScrollPane
        createResponsiveContentArea();
        
        // Assemblage final
        mainLayout.setLeft(sideBarScrollPane);
        mainLayout.setCenter(contentScrollPane);
    }
    
    private void createResponsiveSideBar() {
        // Cr√©ation de la sidebar
        sideBar = new VBox();
        sideBar.getStyleClass().add("sidebar");
        sideBar.setPrefWidth(280);
        sideBar.setSpacing(8);
        sideBar.setPadding(new Insets(24, 0, 24, 0));
        
        // Logo et titre de l'application
        VBox header = createHeader();
        
        // Statut global du syst√®me
        VBox systemStatus = createSystemStatus();
        
        // Boutons de navigation
        Button btnEvenements = createNavButton("üìÖ", "√âv√©nements", "nav-button");
        Button btnParticipants = createNavButton("üë•", "Participants", "nav-button");
        Button btnOrganisateurs = createNavButton("üë®‚Äçüíº", "Organisateurs", "nav-button");
        
        // Actions des boutons avec gestion des erreurs
        btnEvenements.setOnAction(e -> {
            try {
                setSelectedButton(btnEvenements);
                showEvenements();
            } catch (Exception ex) {
                showError("Erreur lors du chargement des √©v√©nements", ex);
            }
        });
        
        btnParticipants.setOnAction(e -> {
            try {
                setSelectedButton(btnParticipants);
                showParticipants();
            } catch (Exception ex) {
                showError("Erreur lors du chargement des participants", ex);
            }
        });
        
        btnOrganisateurs.setOnAction(e -> {
            try {
                setSelectedButton(btnOrganisateurs);
                showOrganisateurs();
            } catch (Exception ex) {
                showError("Erreur lors du chargement des organisateurs", ex);
            }
        });
        
        // Spacer pour pousser les boutons vers le bas
        Region spacer = new Region();
        VBox.setVgrow(spacer, Priority.ALWAYS);
        
        // Boutons d'administration
        Button btnReload = createNavButton("üîÑ", "Recharger donn√©es", "nav-button-secondary");
        Button btnSettings = createNavButton("‚öôÔ∏è", "Param√®tres", "nav-button-secondary");
        Button btnLogout = createNavButton("üö™", currentUser != null ? "D√©connexion" : "Connexion", "nav-button-secondary");
        
        // Actions des boutons d'administration
        btnReload.setOnAction(e -> reloadData());
        btnSettings.setOnAction(e -> showSettings());
        btnLogout.setOnAction(e -> logout());
        
        sideBar.getChildren().addAll(
            header,
            new Separator(),
            systemStatus,
            new Separator(),
            btnEvenements,
            btnParticipants,
            btnOrganisateurs,
            spacer,
            new Separator(),
            btnReload,
            btnSettings,
            btnLogout
        );
        
        // S√©lectionner le premier bouton par d√©faut
        selectedButton = btnEvenements;
        btnEvenements.getStyleClass().add("nav-button-selected");
        
        // Wrap sidebar dans un ScrollPane stylis√©
        sideBarScrollPane = new ScrollPane(sideBar);
        sideBarScrollPane.getStyleClass().add("sidebar-scroll");
        sideBarScrollPane.setFitToWidth(true);
        sideBarScrollPane.setFitToHeight(true);
        sideBarScrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
        sideBarScrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);
        sideBarScrollPane.setPrefWidth(280);
        sideBarScrollPane.setMaxWidth(280);
        sideBarScrollPane.setMinWidth(280);
        
        // Style personnalis√© pour le scrollpane
        sideBarScrollPane.setStyle(
            "-fx-background: #f8fafc;" +
            "-fx-background-color: #f8fafc;" +
            "-fx-border-color: transparent;" +
            "-fx-focus-color: transparent;" +
            "-fx-faint-focus-color: transparent;"
        );
    }
    
    private void createResponsiveContentArea() {
        contentArea = new BorderPane();
        contentArea.getStyleClass().add("content-area");
        
        // Header par d√©faut
        updateContentHeader("Gestion des √âv√©nements", "Interface administrative connect√©e au syst√®me");
        
        // Wrap content area dans un ScrollPane stylis√©
        contentScrollPane = new ScrollPane(contentArea);
        contentScrollPane.getStyleClass().add("content-scroll");
        contentScrollPane.setFitToWidth(true);
        contentScrollPane.setFitToHeight(false);
        contentScrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);
        contentScrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);
        
        // Style personnalis√© pour le scrollpane du contenu
        contentScrollPane.setStyle(
            "-fx-background: white;" +
            "-fx-background-color: white;" +
            "-fx-border-color: transparent;" +
            "-fx-focus-color: transparent;" +
            "-fx-faint-focus-color: transparent;"
        );
        
        // S'assurer que le contenu s'√©tend correctement
        VBox.setVgrow(contentScrollPane, Priority.ALWAYS);
        HBox.setHgrow(contentScrollPane, Priority.ALWAYS);
    }
    
    private VBox createHeader() {
        VBox header = new VBox();
        header.setAlignment(Pos.CENTER);
        header.setSpacing(12);
        header.setPadding(new Insets(0, 24, 24, 24));
        
        // Ic√¥ne de l'application
        Label appIcon = new Label("üéØ");
        appIcon.getStyleClass().add("app-icon");
        
        // Titre de l'application
        Label appTitle = new Label("Administration");
        appTitle.getStyleClass().add("app-title");
        
        Label appSubtitle = new Label("√âv√©nements");
        appSubtitle.getStyleClass().add("app-subtitle");
        
        Label appVersion = new Label(currentUser != null ? "v2.0 - Connect√©" : "v2.0 - D√©mo");
        appVersion.getStyleClass().add("text-secondary");
        appVersion.setStyle("-fx-font-size: 10px;");
        
        header.getChildren().addAll(appIcon, appTitle, appSubtitle, appVersion);
        return header;
    }
    
    private VBox createSystemStatus() {
        VBox statusBox = new VBox();
        statusBox.setAlignment(Pos.CENTER);
        statusBox.setSpacing(8);
        statusBox.setPadding(new Insets(16, 24, 16, 24));
        statusBox.getStyleClass().add("stat-card");
        
        Label statusTitle = new Label("Utilisateur");
        statusTitle.getStyleClass().add("organizer-role");
        statusTitle.setStyle("-fx-font-size: 12px; -fx-font-weight: 600;");
        
        Label userLabel = new Label(currentUser != null ? currentUser.getNom() : "Mode D√©mo");
        userLabel.getStyleClass().add("organizer-name");
        userLabel.setStyle("-fx-font-size: 13px;");
        
        globalStatusLabel = new Label(currentUser != null ? "üîê Administrateur" : "üîì Acc√®s libre");
        globalStatusLabel.getStyleClass().add("status-active");
        globalStatusLabel.setStyle("-fx-font-size: 11px;");
        
        // Afficher les statistiques globales
        DataSynchronizer.SystemStats stats = dataSynchronizer.getSystemStats();
        Label statsLabel = new Label(String.format("%d √©v√©nements ‚Ä¢ %d participants", 
                                                  stats.getTotalEvents(), 
                                                  stats.getTotalParticipants()));
        statsLabel.getStyleClass().add("text-secondary");
        statsLabel.setStyle("-fx-font-size: 10px;");
        
        statusBox.getChildren().addAll(statusTitle, userLabel, globalStatusLabel, statsLabel);
        return statusBox;
    }
    
    private Button createNavButton(String icon, String text, String styleClass) {
        Button button = new Button();
        button.getStyleClass().add(styleClass);
        button.setPrefWidth(240);
        button.setMaxWidth(Double.MAX_VALUE);
        
        // Cr√©ation du contenu du bouton avec ic√¥ne et texte
        HBox content = new HBox();
        content.setAlignment(Pos.CENTER_LEFT);
        content.setSpacing(16);
        
        Label iconLabel = new Label(icon);
        iconLabel.getStyleClass().add("nav-icon");
        
        Label textLabel = new Label(text);
        textLabel.getStyleClass().add("nav-text");
        
        content.getChildren().addAll(iconLabel, textLabel);
        button.setGraphic(content);
        
        return button;
    }
    
    private void updateContentHeader(String title, String subtitle) {
        VBox header = new VBox();
        header.getStyleClass().add("content-header");
        header.setSpacing(8);
        header.setPadding(new Insets(32, 32, 24, 32));
        
        Label titleLabel = new Label(title);
        titleLabel.getStyleClass().add("content-title");
        
        Label subtitleLabel = new Label(subtitle);
        subtitleLabel.getStyleClass().add("content-subtitle");
        
        header.getChildren().addAll(titleLabel, subtitleLabel);
        contentArea.setTop(header);
    }
    
    private void setSelectedButton(Button button) {
        // Retirer la s√©lection du bouton pr√©c√©dent
        if (selectedButton != null) {
            selectedButton.getStyleClass().remove("nav-button-selected");
        }
        
        // S√©lectionner le nouveau bouton
        selectedButton = button;
        button.getStyleClass().add("nav-button-selected");
    }
    
    // M√©thodes pour changer le contenu avec scroll automatique en haut
    private void showEvenements() {
        updateContentHeader("Gestion des √âv√©nements", "Cr√©ez et g√©rez vos √©v√©nements avec le syst√®me connect√©");
        contentArea.setCenter(evenementController.getView());
        scrollToTop();
        updateGlobalStatus();
    }
    
    private void showParticipants() {
        updateContentHeader("Gestion des Participants", "G√©rez les participants avec synchronisation en temps r√©el");
        contentArea.setCenter(participantController.getView());
        scrollToTop();
        updateGlobalStatus();
    }
    
    private void showOrganisateurs() {
        updateContentHeader("Gestion des Organisateurs", "Administrez les organisateurs et leurs √©v√©nements");
        contentArea.setCenter(organisateurController.getView());
        scrollToTop();
        updateGlobalStatus();
    }
    
    private void scrollToTop() {
        // Remonter automatiquement en haut lors du changement de vue
        javafx.application.Platform.runLater(() -> {
            contentScrollPane.setVvalue(0);
            contentScrollPane.setHvalue(0);
        });
    }
    
    private void updateGlobalStatus() {
        try {
            DataSynchronizer.SystemStats stats = dataSynchronizer.getSystemStats();
            globalStatusLabel.setText(String.format("‚úÖ %d √©v√©nements ‚Ä¢ %d participants actifs", 
                                                   stats.getTotalEvents(), 
                                                   stats.getTotalParticipants()));
            globalStatusLabel.getStyleClass().clear();
            globalStatusLabel.getStyleClass().add("status-active");
        } catch (Exception e) {
            globalStatusLabel.setText("‚ùå Erreur de connexion");
            globalStatusLabel.getStyleClass().clear();
            globalStatusLabel.getStyleClass().add("status-inactive");
        }
    }
    
    private void reloadData() {
        // Cr√©er un dialog de progression pour le rechargement
        Stage progressDialog = ModernNotificationUtils.createProgressDialog(
            "Rechargement en cours",
            "Actualisation des donn√©es du syst√®me..."
        );
        progressDialog.show();
        
        new Thread(() -> {
            try {
                Thread.sleep(2000); // Simulation du rechargement
                
                Platform.runLater(() -> {
                    progressDialog.close();
                    
                    try {
                        dataSynchronizer.reloadDemoData();
                        
                        // Snackbar avec action pour voir les changements
                        ModernNotificationUtils.showSnackbar(
                            "Donn√©es recharg√©es avec succ√®s",
                            "VOIR",
                            () -> {
                                if (selectedButton != null) {
                                    selectedButton.fire();
                                }
                                ModernNotificationUtils.showInfoToast("Interface mise √† jour");
                            }
                        );
                        
                        // Rafra√Æchir la vue actuelle
                        if (selectedButton != null) {
                            selectedButton.fire();
                        }
                        
                        System.out.println("‚úÖ Donn√©es recharg√©es par " + 
                            (currentUser != null ? currentUser.getNom() : "Mode D√©mo"));
                        
                    } catch (Exception e) {
                        showError("Erreur lors du rechargement des donn√©es", e);
                    }
                });
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                Platform.runLater(() -> {
                    progressDialog.close();
                    ModernNotificationUtils.showErrorToast("Rechargement interrompu");
                });
            }
        }).start();
    }
    
    private void showSettings() {
        // Cr√©er un dialog de param√®tres moderne et d√©taill√©
        VBox content = new VBox();
        content.setSpacing(20);
        content.setPadding(new Insets(20));
        content.setMaxWidth(600);
        
        // Configuration utilisateur
        VBox userSection = createUserConfigSection();
        
        // Configuration syst√®me
        VBox systemSection = createSystemConfigSection();
        
        // Configuration de l'interface
        VBox interfaceSection = createInterfaceConfigSection();
        
        // Configuration de synchronisation
        VBox syncSection = createSyncConfigSection();
        
        // Informations de version
        VBox versionSection = createVersionInfoSection();
        
        // Actions
        HBox actions = createSettingsActions();
        
        content.getChildren().addAll(userSection, systemSection, interfaceSection, syncSection, versionSection, actions);
        
        Stage settingsDialog = ModernNotificationUtils.createCustomDialog(
            "Configuration du syst√®me",
            content,
            true
        );
        
        settingsDialog.show();
    }
    
    private VBox createUserConfigSection() {
        VBox userSection = new VBox();
        userSection.getStyleClass().add("form-section");
        userSection.setSpacing(12);
        
        Label userTitle = new Label("üë§ Informations utilisateur");
        userTitle.getStyleClass().add("form-section-title");
        
        GridPane userGrid = new GridPane();
        userGrid.setHgap(20);
        userGrid.setVgap(8);
        
        int row = 0;
        if (currentUser != null) {
            addInfoRow(userGrid, "Nom:", currentUser.getNom(), row++);
            addInfoRow(userGrid, "Email:", currentUser.getEmail(), row++);
            addInfoRow(userGrid, "R√¥le:", currentUser.getRole().toString(), row++);
            addInfoRow(userGrid, "Organisation:", 
                      currentUser.getOrganisation() != null ? currentUser.getOrganisation() : "N/A", row++);
            addInfoRow(userGrid, "Compte actif:", currentUser.isActif() ? "Oui" : "Non", row++);
        } else {
            addInfoRow(userGrid, "Mode:", "D√©monstration", row++);
            addInfoRow(userGrid, "Acc√®s:", "Libre (non authentifi√©)", row++);
            addInfoRow(userGrid, "Permissions:", "Lecture/√âcriture", row++);
        }
        
        userSection.getChildren().addAll(userTitle, userGrid);
        return userSection;
    }
    
    private VBox createSystemConfigSection() {
        VBox systemSection = new VBox();
        systemSection.getStyleClass().add("form-section");
        systemSection.setSpacing(12);
        
        Label systemTitle = new Label("‚öôÔ∏è Configuration syst√®me");
        systemTitle.getStyleClass().add("form-section-title");
        
        VBox systemItems = new VBox();
        systemItems.setSpacing(8);
        
        String[] systemSettings = {
            "‚úÖ Pattern Observer: Activ√©",
            "‚úÖ Synchronisation temps r√©el: Activ√©e", 
            "‚úÖ Interface responsive: Activ√©e",
            "‚úÖ ScrollPane stylis√©s: Activ√©s",
            "‚úÖ Notifications modernes: Activ√©es",
            "‚úÖ Base de donn√©es: En m√©moire (op√©rationnelle)",
            "‚úÖ S√©rialisation JSON/XML: Active",
            "‚úÖ Sauvegarde automatique: Active"
        };
        
        for (String setting : systemSettings) {
            Label settingLabel = new Label(setting);
            settingLabel.getStyleClass().add("info-text");
            systemItems.getChildren().add(settingLabel);
        }
        
        systemSection.getChildren().addAll(systemTitle, systemItems);
        return systemSection;
    }
    
    private VBox createInterfaceConfigSection() {
        VBox interfaceSection = new VBox();
        interfaceSection.getStyleClass().add("form-section");
        interfaceSection.setSpacing(12);
        
        Label interfaceTitle = new Label("üé® Interface utilisateur");
        interfaceTitle.getStyleClass().add("form-section-title");
        
        GridPane interfaceGrid = new GridPane();
        interfaceGrid.setHgap(20);
        interfaceGrid.setVgap(8);
        
        int row = 0;
        addInfoRow(interfaceGrid, "Th√®me:", "Material Design", row++);
        addInfoRow(interfaceGrid, "Police:", "Poppins (charg√©e)", row++);
        addInfoRow(interfaceGrid, "Animations:", "Activ√©es", row++);
        addInfoRow(interfaceGrid, "Responsive:", "Oui", row++);
        addInfoRow(interfaceGrid, "Accessibilit√©:", "Optimis√©e", row++);
        addInfoRow(interfaceGrid, "Mode:", currentUser != null ? "Authentifi√©" : "D√©monstration", row++);
        
        interfaceSection.getChildren().addAll(interfaceTitle, interfaceGrid);
        return interfaceSection;
    }
    
    private VBox createSyncConfigSection() {
        VBox syncSection = new VBox();
        syncSection.getStyleClass().add("form-section");
        syncSection.setSpacing(12);
        
        Label syncTitle = new Label("üîÑ Synchronisation");
        syncTitle.getStyleClass().add("form-section-title");
        
        // Statistiques de synchronisation en temps r√©el
        DataSynchronizer.SystemStats stats = dataSynchronizer.getSystemStats();
        
        GridPane syncGrid = new GridPane();
        syncGrid.setHgap(20);
        syncGrid.setVgap(8);
        
        int row = 0;
        addInfoRow(syncGrid, "Statut:", "Connect√© ‚úÖ", row++);
        addInfoRow(syncGrid, "√âv√©nements:", String.valueOf(stats.getTotalEvents()), row++);
        addInfoRow(syncGrid, "Participants:", String.valueOf(stats.getTotalParticipants()), row++);
        addInfoRow(syncGrid, "Inscriptions:", String.valueOf(stats.getTotalInscriptions()), row++);
        addInfoRow(syncGrid, "Utilisateurs:", String.valueOf(stats.getTotalUsers()), row++);
        addInfoRow(syncGrid, "Derni√®re sync:", "Temps r√©el", row++);
        
        syncSection.getChildren().addAll(syncTitle, syncGrid);
        return syncSection;
    }
    
    private VBox createVersionInfoSection() {
        VBox versionSection = new VBox();
        versionSection.getStyleClass().add("form-section");
        versionSection.setSpacing(12);
        
        Label versionTitle = new Label("‚ÑπÔ∏è Informations de version");
        versionTitle.getStyleClass().add("form-section-title");
        
        Label versionInfo = new Label(
            "Version 2.0 - Interface Administrative Connect√©e\n" +
            "‚Ä¢ Authentification utilisateur int√©gr√©e\n" +
            "‚Ä¢ Pattern Observer impl√©ment√©\n" +
            "‚Ä¢ Notifications modernes avec animations\n" +
            "‚Ä¢ Dialogs interactifs et responsive\n" +
            "‚Ä¢ Syst√®me de synchronisation temps r√©el\n" +
            "‚Ä¢ Interface adaptative Material Design\n" +
            "‚Ä¢ S√©rialisation JSON/XML automatique\n" +
            "‚Ä¢ Gestion des exceptions m√©tier"
        );
        versionInfo.getStyleClass().add("form-help-text");
        versionInfo.setWrapText(true);
        versionInfo.setStyle("-fx-background-color: #e3f2fd; -fx-padding: 16px; " +
                            "-fx-border-color: #2196f3; -fx-border-radius: 8px; " +
                            "-fx-background-radius: 8px;");
        
        versionSection.getChildren().addAll(versionTitle, versionInfo);
        return versionSection;
    }
    
    private HBox createSettingsActions() {
        HBox actions = new HBox();
        actions.setSpacing(12);
        actions.setAlignment(Pos.CENTER_RIGHT);
        
        Button exportConfigBtn = new Button("üìä Exporter config");
        exportConfigBtn.getStyleClass().add("secondary-button");
        exportConfigBtn.setOnAction(e -> {
            try {
                dataSynchronizer.exportCompleteBackup();
                ModernNotificationUtils.showSuccessToast("Configuration et donn√©es export√©es");
            } catch (Exception ex) {
                ModernNotificationUtils.showErrorToast("Erreur lors de l'export: " + ex.getMessage());
            }
        });
        
        Button resetBtn = new Button("üîÑ R√©initialiser");
        resetBtn.getStyleClass().add("icon-button-danger");
        resetBtn.setOnAction(e -> {
            boolean confirmed = ModernNotificationUtils.showConfirmation(
                "R√©initialiser la configuration",
                "√ätes-vous s√ªr de vouloir r√©initialiser tous les param√®tres ?\n\n" +
                "‚ö†Ô∏è Cette action restaurera la configuration par d√©faut et rechargera les donn√©es de d√©monstration."
            );
            
            if (confirmed) {
                reloadData();
            }
        });
        
        Button closeBtn = new Button("Fermer");
        closeBtn.getStyleClass().add("primary-button");
        closeBtn.setOnAction(e -> {
            Stage stage = (Stage) closeBtn.getScene().getWindow();
            stage.close();
        });
        
        actions.getChildren().addAll(exportConfigBtn, resetBtn, closeBtn);
        return actions;
    }
    
    private void addInfoRow(GridPane grid, String label, String value, int row) {
        Label labelNode = new Label(label);
        labelNode.setStyle("-fx-font-weight: 600; -fx-min-width: 120px;");
        
        Label valueNode = new Label(value);
        valueNode.setWrapText(true);
        valueNode.setStyle("-fx-text-fill: #2e7d32;");
        
        grid.add(labelNode, 0, row);
        grid.add(valueNode, 1, row);
    }
    
    private void logout() {
        if (currentUser != null) {
            // Utilisateur connect√© - d√©connexion
            boolean confirmed = ModernNotificationUtils.showConfirmation(
                "Confirmer la d√©connexion",
                "√ätes-vous s√ªr de vouloir vous d√©connecter de l'interface administrative ?\n\n" +
                "‚úÖ Toutes les modifications ont √©t√© sauvegard√©es automatiquement.\n" +
                "üîÑ La synchronisation temps r√©el sera interrompue."
            );
            
            if (confirmed) {
                performLogout();
            }
        } else {
            // Mode d√©mo - redirection vers connexion
            performLogout();
        }
    }
    
    private void performLogout() {
        // Animation de d√©connexion avec progression
        Stage progressDialog = ModernNotificationUtils.createProgressDialog(
            "D√©connexion en cours",
            "Sauvegarde des param√®tres et fermeture des connexions..."
        );
        progressDialog.show();
        
        new Thread(() -> {
            try {
                Thread.sleep(1500);
                Platform.runLater(() -> {
                    progressDialog.close();
                    
                    try {
                        // Nettoyer les observers
                        dataSynchronizer.removeGlobalObserver(globalUIObserver);
                        
                        ModernNotificationUtils.showSuccessToast("D√©connexion r√©ussie");
                        
                        // Fermer la fen√™tre actuelle
                        Stage currentStage = (Stage) mainLayout.getScene().getWindow();
                        currentStage.close();
                        
                        // Ouvrir la fen√™tre de connexion
                        Stage loginStage = new Stage();
                        LoginView loginView = new LoginView();
                        loginView.start(loginStage);
                        
                        if (currentUser != null) {
                            System.out.println("‚úÖ Administrateur " + currentUser.getNom() + " d√©connect√©");
                        } else {
                            System.out.println("‚úÖ Session d√©mo ferm√©e");
                        }
                        
                    } catch (Exception e) {
                        System.err.println("‚ùå Erreur lors de la redirection: " + e.getMessage());
                        javafx.application.Platform.exit();
                    }
                });
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                Platform.runLater(() -> {
                    progressDialog.close();
                    ModernNotificationUtils.showErrorToast("D√©connexion interrompue");
                });
            }
        }).start();
    }
    
    private void showWelcomeMessage() {
        // Message de bienvenue moderne et d√©taill√©
        VBox content = new VBox();
        content.setSpacing(20);
        content.setPadding(new Insets(20));
        content.setMaxWidth(700);
        
        // En-t√™te de bienvenue
        VBox welcomeHeader = createWelcomeHeader();
        
        // Statistiques du syst√®me
        VBox systemStats = createSystemStatsSection();
        
        // Fonctionnalit√©s modernes
        VBox featuresSection = createModernFeaturesSection();
        
        // Guide de d√©marrage rapide
        VBox quickStartSection = createQuickStartSection();
        
        // Actions de bienvenue
        HBox welcomeActions = createWelcomeActions();
        
        content.getChildren().addAll(welcomeHeader, systemStats, featuresSection, quickStartSection, welcomeActions);
        
        Stage welcomeDialog = ModernNotificationUtils.createCustomDialog(
            "Interface Administrative - Syst√®me Connect√©",
            content,
            true
        );
        
        welcomeDialog.show();
    }
    
    private VBox createWelcomeHeader() {
        VBox welcomeHeader = new VBox();
        welcomeHeader.getStyleClass().add("form-section");
        welcomeHeader.setAlignment(Pos.CENTER);
        welcomeHeader.setSpacing(12);
        welcomeHeader.setPadding(new Insets(20));
        
        Label welcomeIcon = new Label("üéâ");
        welcomeIcon.setStyle("-fx-font-size: 48px;");
        
        String welcomeText = currentUser != null ? 
            "Bienvenue " + currentUser.getNom() + " !" : 
            "Bienvenue dans l'interface administrative !";
        
        Label welcomeTitle = new Label(welcomeText);
        welcomeTitle.setStyle("-fx-font-size: 24px; -fx-font-weight: 600;");
        
        String subtitleText = currentUser != null ?
            "Interface Authentifi√©e ‚Ä¢ Acc√®s Administrateur ‚Ä¢ Synchronisation Temps R√©el" :
            "Mode D√©monstration ‚Ä¢ Acc√®s Libre ‚Ä¢ Synchronisation Temps R√©el";
        
        Label welcomeSubtitle = new Label(subtitleText);
        welcomeSubtitle.setStyle("-fx-font-size: 14px; -fx-text-fill: #666;");
        
        welcomeHeader.getChildren().addAll(welcomeIcon, welcomeTitle, welcomeSubtitle);
        return welcomeHeader;
    }
    
    private VBox createSystemStatsSection() {
        VBox systemStats = new VBox();
        systemStats.getStyleClass().add("form-section");
        systemStats.setSpacing(12);
        
        Label statsTitle = new Label("üìä √âtat actuel du syst√®me");
        statsTitle.getStyleClass().add("form-section-title");
        
        DataSynchronizer.SystemStats stats = dataSynchronizer.getSystemStats();
        
        HBox statsBar = new HBox();
        statsBar.setSpacing(16);
        statsBar.setAlignment(Pos.CENTER);
        
        VBox eventsCard = createQuickStatCard(
            String.valueOf(stats.getTotalEvents()),
            "√âv√©nements",
            "#2196f3"
        );
        
        VBox participantsCard = createQuickStatCard(
            String.valueOf(stats.getTotalParticipants()),
            "Participants",
            "#4caf50"
        );
        
        VBox inscriptionsCard = createQuickStatCard(
            String.valueOf(stats.getTotalInscriptions()),
            "Inscriptions",
            "#ff9800"
        );
        
        VBox usersCard = createQuickStatCard(
            String.valueOf(stats.getTotalUsers()),
            "Utilisateurs",
            "#9c27b0"
        );
        
        statsBar.getChildren().addAll(eventsCard, participantsCard, inscriptionsCard, usersCard);
        systemStats.getChildren().addAll(statsTitle, statsBar);
        return systemStats;
    }
    
    private VBox createModernFeaturesSection() {
        VBox featuresSection = new VBox();
        featuresSection.getStyleClass().add("form-section");
        featuresSection.setSpacing(12);
        
        Label featuresTitle = new Label("‚ú® Fonctionnalit√©s activ√©es");
        featuresTitle.getStyleClass().add("form-section-title");
        
        VBox featuresList = new VBox();
        featuresList.setSpacing(8);
        
        String[] features = {
            "‚úÖ Authentification utilisateur s√©curis√©e",
            "‚úÖ Pattern Observer pour synchronisation temps r√©el",
            "‚úÖ Notifications modernes avec animations fluides",
            "‚úÖ Dialogs interactifs et confirmations intelligentes",
            "‚úÖ Interface responsive s'adaptant √† la taille de fen√™tre",
            "‚úÖ ScrollPane stylis√©s pour une navigation optimale",
            "‚úÖ Design Material avec transitions et feedback visuel",
            "‚úÖ S√©rialisation automatique JSON/XML",
            "‚úÖ Gestion d'exceptions m√©tier int√©gr√©e",
            "‚úÖ Sauvegarde automatique des donn√©es"
        };
        
        for (String feature : features) {
            Label featureLabel = new Label(feature);
            featureLabel.getStyleClass().add("info-text");
            featuresList.getChildren().add(featureLabel);
        }
        
        featuresSection.getChildren().addAll(featuresTitle, featuresList);
        return featuresSection;
    }
    
    private VBox createQuickStartSection() {
        VBox quickStartSection = new VBox();
        quickStartSection.getStyleClass().add("form-section");
        quickStartSection.setSpacing(12);
        
        Label quickStartTitle = new Label("üöÄ Guide de d√©marrage rapide");
        quickStartTitle.getStyleClass().add("form-section-title");
        
        String guideText = currentUser != null ?
            "L'interface administrative vous permet de :\n\n" +
            "‚Ä¢ üìÖ G√©rer tous les √©v√©nements du syst√®me\n" +
            "‚Ä¢ üë• Administrer les participants et leurs inscriptions\n" +
            "‚Ä¢ üë®‚Äçüíº Superviser les organisateurs et leurs activit√©s\n" +
            "‚Ä¢ üîÑ Recharger les donn√©es en temps r√©el\n" +
            "‚Ä¢ ‚öôÔ∏è Configurer les param√®tres du syst√®me\n" +
            "‚Ä¢ üìä Exporter et sauvegarder les donn√©es\n\n" +
            "En tant qu'administrateur connect√©, toutes vos modifications sont " +
            "automatiquement sauvegard√©es et synchronis√©es en temps r√©el avec " +
            "tous les autres utilisateurs du syst√®me." :
            
            "L'interface administrative en mode d√©monstration vous permet de :\n\n" +
            "‚Ä¢ üìÖ Consulter et tester la gestion des √©v√©nements\n" +
            "‚Ä¢ üë• Explorer l'administration des participants\n" +
            "‚Ä¢ üë®‚Äçüíº D√©couvrir la supervision des organisateurs\n" +
            "‚Ä¢ üîÑ Tester le rechargement des donn√©es\n" +
            "‚Ä¢ ‚öôÔ∏è Explorer les param√®tres du syst√®me\n\n" +
            "Pour acc√©der √† toutes les fonctionnalit√©s et sauvegarder vos " +
            "modifications, connectez-vous avec un compte administrateur.";
        
        Label quickStartText = new Label(guideText);
        quickStartText.getStyleClass().add("form-help-text");
        quickStartText.setWrapText(true);
        quickStartText.setStyle("-fx-background-color: #f3e5f5; -fx-padding: 16px; " +
                               "-fx-border-color: #9c27b0; -fx-border-radius: 8px; " +
                               "-fx-background-radius: 8px;");
        
        quickStartSection.getChildren().addAll(quickStartTitle, quickStartText);
        return quickStartSection;
    }
    
    private HBox createWelcomeActions() {
        HBox welcomeActions = new HBox();
        welcomeActions.setSpacing(12);
        welcomeActions.setAlignment(Pos.CENTER_RIGHT);
        
        Button exploreBtn = new Button("üîç Explorer les √©v√©nements");
        exploreBtn.getStyleClass().add("primary-button");
        exploreBtn.setOnAction(e -> {
            Stage stage = (Stage) exploreBtn.getScene().getWindow();
            stage.close();
            showEvenements();
            ModernNotificationUtils.showInfoToast("Chargement de la gestion des √©v√©nements");
        });
        
        Button settingsBtn = new Button("‚öôÔ∏è Voir param√®tres");
        settingsBtn.getStyleClass().add("secondary-button");
        settingsBtn.setOnAction(e -> {
            Stage stage = (Stage) settingsBtn.getScene().getWindow();
            stage.close();
            showSettings();
        });
        
        Button startBtn = new Button("Commencer");
        startBtn.getStyleClass().add("secondary-button");
        startBtn.setOnAction(e -> {
            Stage stage = (Stage) startBtn.getScene().getWindow();
            stage.close();
            ModernNotificationUtils.showSuccessToast("Interface administrative pr√™te !");
        });
        
        welcomeActions.getChildren().addAll(exploreBtn, settingsBtn, startBtn);
        return welcomeActions;
    }
    
    private VBox createQuickStatCard(String value, String label, String color) {
        VBox card = new VBox();
        card.setAlignment(Pos.CENTER);
        card.setSpacing(4);
        card.setPadding(new Insets(12));
        card.setStyle("-fx-border-color: " + color + "; -fx-border-width: 1px; " +
                      "-fx-border-radius: 8px; -fx-background-radius: 8px; " +
                      "-fx-background-color: derive(" + color + ", 95%);");
        
        Label valueLabel = new Label(value);
        valueLabel.setStyle("-fx-font-size: 18px; -fx-font-weight: 700; -fx-text-fill: " + color + ";");
        
        Label labelLabel = new Label(label);
        labelLabel.setStyle("-fx-font-size: 11px; -fx-text-fill: #666; -fx-text-alignment: center;");
        labelLabel.setWrapText(true);
        labelLabel.setMaxWidth(80);
        
        card.getChildren().addAll(valueLabel, labelLabel);
        return card;
    }
    
    private void showError(String message, Exception e) {
        // Mettre √† jour le statut global
        globalStatusLabel.setText("‚ùå " + message);
        globalStatusLabel.getStyleClass().clear();
        globalStatusLabel.getStyleClass().add("status-inactive");
        
        // Afficher une notification d'erreur moderne
        ModernNotificationUtils.showErrorToast(message + ": " + e.getMessage());
        
        // Log de l'erreur
        System.err.println("‚ùå Erreur dans l'interface admin: " + message + " - " + e.getMessage());
        if (currentUser != null) {
            System.err.println("   Utilisateur: " + currentUser.getNom());
        }
        e.printStackTrace();
    }
    
    private void showSuccessMessage(String message) {
        // Mettre √† jour le statut global
        globalStatusLabel.setText("‚úÖ " + message);
        globalStatusLabel.getStyleClass().clear();
        globalStatusLabel.getStyleClass().add("status-active");
        
        // Toast pour feedback imm√©diat
        ModernNotificationUtils.showSuccessToast(message);
        
        // Revenir au statut normal apr√®s 3 secondes
        new Thread(() -> {
            try {
                Thread.sleep(3000);
                javafx.application.Platform.runLater(this::updateGlobalStatus);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }).start();
    }
    
    @Override
    public void stop() throws Exception {
        // Nettoyer les observers lors de la fermeture
        if (dataSynchronizer != null && globalUIObserver != null) {
            dataSynchronizer.removeGlobalObserver(globalUIObserver);
        }
        super.stop();
    }
    
    public static void main(String[] args) {
        launch(args);
    }
}